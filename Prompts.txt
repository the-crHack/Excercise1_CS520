1. Chain-of-Thought (CoT)

Prompt:
{####problem statement}
Lemme thought process you this step by step:
Firstly you will understand what the functions should do
Then, you will analyze the expected inputs and outputs
Next, you will think of how to approach this problem
Finally, you will implement the solution


2. Stepwise Chain-of-Thought (SCOT)

Prompt:
{####problem statement}
Let's solve this using a systematic and proper stepwise approach:
Step 1: Problem Analysis: Understand what the function needs to do and know the
inputs and expected outputs. Determine the main requirements.
Step 2: Algorithm Design: Choose the most appropriate approach or algorithm, take
computational complexity under consideration (should be optimal), and plan the main
logic flow.
Step 3: Edge Case Consideration: Identify potential edge cases (like empty inputs,
single elements.) and design how to handle special scenarios. Consider input
validation as needed.
Step 4: Implementation: Write the function step by step, implement the core logic, and
handle the edge cases so that you don’t fail on unseen test data.
Step 5: Verification: After writing the solution, review for correctness and check if it
fulfills all the requirements. Now I'll implement the function.


3. Improvisd prompts for Debugging 

{####problem statement}
‘’
Above generated code is failing some test cases. Write a function find_Diff that
takes a list of integers and returns the difference between the highest and lowest
frequencies of elements in the list. Use collections.Counter to count
frequencies. Handle empty lists by returning 0. Show the frequency dictionary before
returning the result.
sample test cases
['assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2',
'assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3',]
’’’

4. Improvised Prompts for Debugging 


{####problem statement}
‘’’Let's debug your code. For m=4, n=3, print the number of squares for each possible
size (1x1, 2x2, 3x3), then sum them. If m or n is 0, return 0.
sample test case where it failed
Test 4 FAILED: assert count_Squares(5, 2) == 10 , the generated code gives 14
Test 13 FAILED: assert count_Squares(3, 7) == 28 , the generated code give 38
Show me your test case verification like For count_Squares(5,2), show me
step-by-step what your code returns and break down the calculation. Try differentapproaches other than iterative ones. Also please Don't guess, if the test cases don't match your understanding ask me for more clarification and test cases
