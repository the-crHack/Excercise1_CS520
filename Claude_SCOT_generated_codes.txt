#####This file contains 5 variant of solutions (used for pass@k) for the each of the selected problem statement generated by Claude using Step wise Chain of thought prompting technique.


problem1_solutions = [
    # Set 1
    """def position_max(lst):
    \"\"\"Find all indices where the maximum value occurs.\"\"\"
    if not lst:
        return []
    max_val = max(lst)
    return [i for i, val in enumerate(lst) if val == max_val]""",
    # Set 2
    """def position_max(lst):
    \"\"\"Find all index positions of the maximum values in a given list.\"\"\"
    if not lst:
        return []
    max_val = max(lst)
    return [i for i, x in enumerate(lst) if x == max_val]""",
    # Set 3
    """def position_max(lst):
    if not lst:
        return []
    max_val = max(lst)
    return [i for i, x in enumerate(lst) if x == max_val]""",
    # Set 4
    """def position_max(lst):
    if not lst:
        return []
    m = max(lst)
    return [i for i, v in enumerate(lst) if v == m]""",
    # Set 5
    """def position_max(lst):
    \"\"\"Find all index positions of the maximum values in a given list.\"\"\"
    if not lst:
        return []
    max_val = max(lst)
    return [i for i, val in enumerate(lst) if val == max_val]""",
]

problem2_solutions = [
    # Set 1
    """def find_Diff(arr):
    \"\"\"Find the difference between highest and lowest frequency in array.\"\"\"
    if not arr:
        return 0
    freq = {}
    for num in arr:
        freq[num] = freq.get(num, 0) + 1
    frequencies = list(freq.values())
    return max(frequencies) - min(frequencies)""",
    # Set 2
    """def find_Diff(arr):
    \"\"\"Find the difference between highest and least frequencies in a given array.\"\"\"
    if not arr:
        return 0
    from collections import Counter
    freq = Counter(arr)
    frequencies = list(freq.values())
    return max(frequencies) - min(frequencies)""",
    # Set 3
    """def find_Diff(arr):
    if not arr:
        return 0
    from collections import Counter
    freq = Counter(arr)
    frequencies = list(freq.values())
    return max(frequencies) - min(frequencies)""",
    # Set 4
    """def find_Diff(arr):
    if not arr:
        return 0
    from collections import Counter
    c = Counter(arr).values()
    return max(c) - min(c)""",
    # Set 5
    """def find_Diff(arr):
    \"\"\"Find the difference between highest and least frequencies in a given array.\"\"\"
    if not arr:
        return 0
    freq = {}
    for num in arr:
        freq[num] = freq.get(num, 0) + 1
    frequencies = list(freq.values())
    return max(frequencies) - min(frequencies)""",
]

problem3_solutions = [
    # Set 1
    """def is_valid_parenthese(s):
    \"\"\"Check if a string of parentheses is valid.\"\"\"
    stack = []
    matching = {'(': ')', '[': ']', '{': '}'}
    for char in s:
        if char in matching:
            stack.append(char)
        elif char in matching.values():
            if not stack:
                return False
            if matching[stack.pop()] != char:
                return False
    return len(stack) == 0""",
    # Set 2
    """def is_valid_parenthese(s):
    \"\"\"Verify validity of a string of parentheses.\"\"\"
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping:
            if not stack or stack.pop() != mapping[char]:
                return False
    return not stack""",
    # Set 3
    """def is_valid_parenthese(s):
    d = {'(': ')', '[': ']', '{': '}'}
    stack = []
    for ch in s:
        if ch in d:
            stack.append(ch)
        elif not stack or d[stack.pop()] != ch:
            return False
    return not stack""",
    # Set 4
    """def is_valid_parenthese(s):
    \"\"\"Verify validity of a string of parentheses.\"\"\"
    if not s:
        return True
    stack = []
    matching = {'(': ')', '{': '}', '[': ']'}
    for char in s:
        if char in matching:
            stack.append(char)
        elif char in matching.values():
            if not stack or matching[stack.pop()] != char:
                return False
    return len(stack) == 0""",
    # Set 5
    """def is_valid_parenthese(s):
    \"\"\"Check if parentheses are balanced\"\"\"
    if not s:
        return True
    stack = []
    matching = {'(': ')', '{': '}', '[': ']'}
    for char in s:
        if char in matching:
            stack.append(char)
        elif char in matching.values():
            if not stack or matching[stack.pop()] != char:
                return False
    return len(stack) == 0""",
]

problem4_solutions = [
    # Set 1
    """def find_peak(arr):
    \"\"\"Find a peak element in the array (element greater than its neighbors).\"\"\"
    n = len(arr)
    if n == 0:
        return None
    if n == 1:
        return arr[0]
    if arr[0] >= arr[1]:
        return arr[0]
    if arr[n-1] >= arr[n-2]:
        return arr[n-1]
    for i in range(1, n-1):
        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:
            return arr[i]
    return None""",
    # Set 2
    """def find_peak(arr):
    \"\"\"Find a peak element in the given array (an element greater than its neighbors).\"\"\"
    if not arr:
        return None
    n = len(arr)
    if n == 1:
        return arr[0]
    if arr[0] > arr[1]:
        return arr[0]
    if arr[n - 1] > arr[n - 2]:
        return arr[n - 1]
    for i in range(1, n - 1):
        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:
            return arr[i]
    return max(arr)""",
    # Set 3
    """def find_peak(arr):
    if not arr:
        return None
    n = len(arr)
    if n == 1:
        return arr[0]
    if arr[0] >= arr[1]:
        return arr[0]
    if arr[n - 1] >= arr[n - 2]:
        return arr[n - 1]
    for i in range(1, n - 1):
        if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]:
            return arr[i]
    return arr[0]""",
    # Set 4
    """def find_peak(arr):
    if len(arr) == 1:
        return arr[0]
    for i in range(len(arr)):
        left = arr[i - 1] if i > 0 else float('-inf')
        right = arr[i + 1] if i < len(arr) - 1 else float('-inf')
        if arr[i] > left and arr[i] > right:
            return arr[i]
    return arr[0]""",
    # Set 5
    """def find_peak(arr):
    \"\"\"Find the peak element in the given array.\"\"\"
    if not arr:
        return None
    n = len(arr)
    if n == 1:
        return arr[0]
    if arr[0] >= arr[1]:
        return arr[0]
    if arr[n-1] >= arr[n-2]:
        return arr[n-1]
    for i in range(1, n-1):
        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:
            return arr[i]
    return None""",
]

problem5_solutions = [
    # Set 1
    """def bell_number(n):
    \"\"\"Calculate the nth Bell number.\"\"\"
    if n == 0:
        return 1
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]""",
    # Set 2
    """def bell_number(n):
    \"\"\"Return the nth Bell number (number of ways to partition a set of n elements).\"\"\"
    if n < 0:
        return 0
    if n == 0:
        return 1
    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    bell[0][0] = 1
    for i in range(1, n + 1):
        bell[i][0] = bell[i - 1][i - 1]
        for j in range(1, i + 1):
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]
    return bell[n][0]""",
    # Set 3
    """def bell_number(n):
    if n < 0:
        return 0
    if n == 0:
        return 1
    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    bell[0][0] = 1
    for i in range(1, n + 1):
        bell[i][0] = bell[i - 1][i - 1]
        for j in range(1, i + 1):
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]
    return bell[n][0]""",
    # Set 4
    """def bell_number(n):
    if n < 0:
        return 0
    bell = [[0] * (n + 1) for _ in range(n + 1)]
    bell[0][0] = 1
    for i in range(1, n + 1):
        bell[i][0] = bell[i - 1][i - 1]
        for j in range(1, i + 1):
            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]
    return bell[n][0]""",
    # Set 5
    """def bell_number(n):
    \"\"\"Find the number of ways to partition a set of Bell numbers.\"\"\"
    if n == 0:
        return 1
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]""",
]

problem6_solutions = [
    # Set 1
    """def filter_oddnumbers(lst):
    \"\"\"Filter odd numbers from a list using lambda function.\"\"\"
    return list(filter(lambda x: x % 2 != 0, lst))""",
    # Set 2
    """def filter_oddnumbers(nums):
    \"\"\"Filter odd numbers using lambda function.\"\"\"
    return list(filter(lambda x: x % 2 != 0, nums))""",
    # Set 3
    """def filter_oddnumbers(lst):
    return list(filter(lambda x: x % 2 != 0, lst))""",
    # Set 4
    """def filter_oddnumbers(nums):
    \"\"\"Filter odd numbers from list\"\"\"
    if not nums:
        return []
    return list(filter(lambda x: x % 2 != 0, nums))""",
    # Set 5
    """def filter_oddnumbers(nums):
    \"\"\"Filter odd numbers using lambda function.\"\"\"
    return list(filter(lambda x: x % 2 != 0, nums))""",
]

problem7_solutions = [
    # Set 1
    """def bitwise_xor(tup1, tup2):
    \"\"\"Perform bitwise XOR operation across corresponding elements of tuples.\"\"\"
    return tuple(map(lambda x, y: x ^ y, tup1, tup2))""",
    # Set 2
    """def bitwise_xor(tup1, tup2):
    \"\"\"Perform bitwise XOR operation across the given tuples element-wise.\"\"\"
    return tuple(a ^ b for a, b in zip(tup1, tup2))""",
    # Set 3
    """def bitwise_xor(tup1, tup2):
    return tuple(a ^ b for a, b in zip(tup1, tup2))""",
    # Set 4
    """def bitwise_xor(t1, t2):
    \"\"\"Perform bitwise XOR on corresponding elements of tuples\"\"\"
    if not t1 or not t2:
        return ()
    return tuple(map(lambda x, y: x ^ y, t1, t2))""",
    # Set 5
    """def bitwise_xor(t1, t2):
    \"\"\"Perform mathematical bitwise XOR operation across given tuples.\"\"\"
    return tuple(a ^ b for a, b in zip(t1, t2))""",
]

problem8_solutions = [
    # Set 1
    """def count_Squares(m, n):
    \"\"\"Count the number of squares in an m x n rectangle.\"\"\"
    count = 0
    for i in range(1, min(m, n) + 1):
        count += (m - i + 1) * (n - i + 1)
    return count""",
    # Set 2
    """def count_Squares(m, n):
    \"\"\"Count the number of squares in a m x n rectangle.\"\"\"
    if m <= 0 or n <= 0:
        return 0
    total = 0
    min_side = min(m, n)
    for i in range(1, min_side + 1):
        total += (m - i + 1) * (n - i + 1)
    return total""",
    # Set 3
    """def count_Squares(m, n):
    if m <= 0 or n <= 0:
        return 0
    return sum((m - i) * (n - i) for i in range(min(m, n)))""",
    # Set 4
    """def count_Squares(m, n):
    return sum(min(i, j) for i in range(1, m + 1) for j in range(1, n + 1))""",
    # Set 5
    """def count_Squares(m, n):
    \"\"\"Count the number of squares in a rectangle of size m x n.\"\"\"
    count = 0
    for i in range(1, min(m, n) + 1):
        count += (m - i + 1) * (n - i + 1)
    return count""",
]

problem9_solutions = [
    # Set 1
    """def sub_list(lst1, lst2):
    \"\"\"Subtract corresponding elements of two lists using map and lambda.\"\"\"
    return list(map(lambda x, y: x - y, lst1, lst2))""",
    # Set 2
    """def sub_list(list1, list2):
    \"\"\"Subtract two lists element-wise using map and lambda function.\"\"\"
    return list(map(lambda x, y: x - y, list1, list2))""",
    # Set 3
    """def sub_list(list1, list2):
    return list(map(lambda x, y: x - y, list1, list2))""",
    # Set 4
    """def sub_list(lst1, lst2):
    \"\"\"Subtract corresponding elements of two lists\"\"\"
    if not lst1 or not lst2:
        return []
    return list(map(lambda x, y: x - y, lst1, lst2))""",
    # Set 5
    """def sub_list(l1, l2):
    \"\"\"Subtract two lists using map and lambda function.\"\"\"
    return list(map(lambda x, y: x - y, l1, l2))""",
]

problem10_solutions = [
    # Set 1
    """def month_season(month, day):
    \"\"\"Return the season for a given month and day.\"\"\"
    month = month.lower()
    if month in ['december', 'january', 'february']:
        if month == 'december' and day < 21:
            return 'autumn'
        elif month == 'february' and day >= 20:
            return 'spring'
        return 'winter'
    elif month in ['march', 'april', 'may']:
        if month == 'march' and day < 20:
            return 'winter'
        elif month == 'may' and day >= 21:
            return 'summer'
        return 'spring'
    elif month in ['june', 'july', 'august']:
        if month == 'june' and day < 21:
            return 'spring'
        elif month == 'august' and day >= 23:
            return 'autumn'
        return 'summer'
    elif month in ['september', 'october', 'november']:
        if month == 'september' and day < 23:
            return 'summer'
        elif month == 'november' and day >= 22:
            return 'winter'
        return 'autumn'
    return 'unknown'""",
    # Set 2
    """def month_season(month, day):
    \"\"\"Return the season for the given month and day (Northern Hemisphere).\"\"\"
    if month in [1, 2] or (month == 3 and day < 20) or (month == 12 and day >= 21):
        return "Winter"
    elif month in [4, 5] or (month == 3 and day >= 20) or (month == 6 and day < 21):
        return "Spring"
    elif month in [7, 8] or (month == 6 and day >= 21) or (month == 9 and day < 22):
        return "Summer"
    elif month in [10, 11] or (month == 9 and day >= 22) or (month == 12 and day < 21):
        return "Autumn"
    else:
        return "Invalid date\"""",
    # Set 3
    """def month_season(month, day):
    if not (1 <= month <= 12) or not (1 <= day <= 31):
        return "Invalid date"
    if month == 12 and day >= 21:
        return "Winter"
    elif month in [1, 2] or (month == 3 and day < 20):
        return "Winter"
    elif month in [3, 4, 5] or (month == 6 and day < 21):
        if month == 3 and day >= 20:
            return "Spring"
        elif month == 6 and day < 21:
            return "Spring"
        else:
            return "Spring"
    elif month in [6, 7, 8] or (month == 9 and day < 22):
        if month == 6 and day >= 21:
            return "Summer"
        elif month == 9 and day < 22:
            return "Summer"
        else:
            return "Summer"
    elif month in [9, 10, 11] or (month == 12 and day < 21):
        if month == 9 and day >= 22:
            return "Autumn"
        elif month == 12 and day < 21:
            return "Autumn"
        else:
            return "Autumn"
    else:
        return "Winter\"""",
    # Set 4
    """def month_season(month, day):
    if month in [12, 1, 2]:
        if (month == 12 and day >= 21) or (month == 3 and day <= 19):
            return "Winter"
        elif month == 1 or month == 2:
            return "Winter"
    if month in [3, 4, 5]:
        if (month == 3 and day >= 20) or (month == 6 and day <= 20):
            return "Spring"
        elif month == 4 or month == 5:
            return "Spring"
    if month in [6, 7, 8]:
        if (month == 6 and day >= 21) or (month == 9 and day <= 21):
            return "Summer"
        elif month == 7 or month == 8:
            return "Summer"
    if month in [9, 10, 11]:
        if (month == 9 and day >= 22) or (month == 12 and day <= 20):
            return "Autumn"
        elif month == 10 or month == 11:
            return "Autumn"
    # Fallback for edge cases
    if month == 12 and day >= 21:
        return "Winter"
    if month == 3 and day >= 20:
        return "Spring"
    if month == 6 and day >= 21:
        return "Summer"
    if month == 9 and day >= 22:
        return "Autumn"
    return "Invalid\"""",
    # Set 5
    """def month_season(month, day):
    \"\"\"Print the season for the given month and day.\"\"\"
    month = month.lower()
    if month == 'december':
        return 'winter' if day >= 21 else 'autumn'
    elif month in ['january', 'february']:
        return 'winter'
    elif month == 'march':
        return 'spring' if day >= 20 else 'winter'
    elif month in ['april', 'may']:
        return 'spring'
    elif month == 'june':
        return 'summer' if day >= 21 else 'spring'
    elif month in ['july', 'august']:
        return 'summer'
    elif month == 'september':
        return 'autumn' if day >= 22 else 'summer'
    elif month in ['october', 'november']:
        return 'autumn'
    else:
        return None""",
]

